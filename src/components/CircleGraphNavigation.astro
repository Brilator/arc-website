---
const circles = [
  { id: 1, cx: 8, cy: 10, r: 5, href: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ', text: 'Rick', angle: 230 },
  { id: 2, cx: 30, cy: 40, r: 5, href: '#link2', text: 'Link 2', angle: 20 },
  { id: 3, cx: 60, cy: 35, r: 5, href: '#link3', text: 'Link 3', angle: 130 },
  { id: 4, cx: 90, cy: 15, r: 5, href: '#link4', text: 'Link 4', angle: 315 },
  { id: 5, cx: 140, cy: 25, r: 5, href: '#link4', text: 'Link 4', angle: 210 },
];

// Function to calculate positions for text and arcs
const calculatePositions = (cx: number, cy: number, r: number, angleDegrees: number) => {
  const arcOffset = r + 2;
  const textOffset = arcOffset + 3;
  const angleRadians = (angleDegrees - 90) * (Math.PI / 180); // Convert degrees to radians and adjust for SVG coordinate system
  const startAngle = angleRadians - (35 * Math.PI) / 180; // Start angle for the arc (35 degrees before the given angle)
  const endAngle = angleRadians + (35 * Math.PI) / 180; // End angle for the arc (35 degrees after the given angle)
  const arcRadius = arcOffset // Radius of the arc, slightly outside the circle

  // Calculate start and end points of the arc
  const startX = cx + arcRadius * Math.cos(startAngle);
  const startY = cy + arcRadius * Math.sin(startAngle);
  const endX = cx + arcRadius * Math.cos(endAngle);
  const endY = cy + arcRadius * Math.sin(endAngle);

  // Calculate text position
  const textX = cx + textOffset * Math.cos(angleRadians); // Adjust text position further outside
  const textY = cy + textOffset * Math.sin(angleRadians);

  return { startX, startY, endX, endY, textX, textY };
};

---
<div id="container" class="w-full h-auto p-4 max-h-[400px] flex">
  <!-- Set SVG dimensions and aspect ratio for responsiveness -->
  <svg viewBox="0 0 150 50" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" class="overflow-visible bg-accent">
    <!-- Draw lines between circles -->
    {circles.slice(1).map((circle, index) => (
      <line 
        x1={circles[index].cx} 
        y1={circles[index].cy} 
        x2={circle.cx} 
        y2={circle.cy} 
        stroke="black" 
        stroke-width="4"
      />
    ))}
  
    <!-- Draw circles and anchor links -->
    {circles.map(circle => {
      const { startX, startY, endX, endY, textX, textY } = calculatePositions(circle.cx, circle.cy, circle.r, circle.angle);
      return (<a 
        href={circle.href}
        style={`transform-origin: ${circle.cx}px ${circle.cy}px;`}
        class="transition-transform duration-300 ease-in-out transform hover:scale-150 hover:drop-shadow-lg cursor-pointer">
        <circle 
          cx={circle.cx} 
          cy={circle.cy} 
          r={circle.r} 
          class="fill-white stroke-black stroke-1"
        />
        <!-- Add a curved line (arc) connecting the circle to the text -->
        <path 
          d={`M ${startX} ${startY} A ${circle.r + 1} ${circle.r + 1} 0 0 1 ${endX} ${endY}`}
          stroke="black" 
          stroke-width="0.2" 
          fill="none"
        />
        <!-- Add text element relative to each circle -->
        <text 
          x={textX} 
          y={textY} 
          text-anchor="middle" 
          alignment-baseline="middle" 
          class="fill-black cursor-pointer"
          font-size="2"
        >
          {circle.text}
        </text>
      </a>)
    })}
  </svg>
</div>

<style>

  #container {
  }

  svg {
    width: 100%;
    max-width: 100%;
    border: 1px solid black;
  }
</style>