---

interface Circle {
  id: number | string;
  cx: number;
  cy: number;
  r: number;
  href: string;
  text: string;
  angle: number;
}

export enum Color {
  primary,
  accent
}

const circles: Circle[] = Astro.props.circles

const color: Color = Astro.props.color || Color.primary;

function getColorStr(color: Color) {
  switch (color) {
    case Color.primary:
      return "primary";
    case Color.accent:
      return "accent";
    default:
      return "primary";
  }
}

function getColorDropClass(color: Color) {
  switch (color) {
    case Color.primary:
      return "drop-primary";
    case Color.accent:
      return "drop-accent";
    default:
      return "drop-primary";
  }
}

// Function to calculate positions for text and arcs
const calculatePositions = (cx: number, cy: number, r: number, angleDegrees: number) => {
  const arcOffset = r + 2;
  const textOffset = arcOffset + 3;
  const angleRadians = (angleDegrees - 90) * (Math.PI / 180); // Convert degrees to radians and adjust for SVG coordinate system
  const startAngle = angleRadians - (35 * Math.PI) / 180; // Start angle for the arc (35 degrees before the given angle)
  const endAngle = angleRadians + (35 * Math.PI) / 180; // End angle for the arc (35 degrees after the given angle)
  const arcRadius = arcOffset // Radius of the arc, slightly outside the circle

  // Calculate start and end points of the arc
  const startX = cx + arcRadius * Math.cos(startAngle);
  const startY = cy + arcRadius * Math.sin(startAngle);
  const endX = cx + arcRadius * Math.cos(endAngle);
  const endY = cy + arcRadius * Math.sin(endAngle);

  // Calculate text position
  const textX = cx + textOffset * Math.cos(angleRadians); // Adjust text position further outside
  const textY = cy + textOffset * Math.sin(angleRadians);

  return { startX, startY, endX, endY, textX, textY };
};

const calculateTextAnchor = (textX: number, circleCx: number, radialPosition: number) => {
  const radialCenterThreshold = 20;
  if (radialPosition >= (360-radialCenterThreshold) || radialPosition <= (0+radialCenterThreshold)) {
    return 'middle'
  } else if (radialPosition >= (180-radialCenterThreshold) && radialPosition <= (180+radialCenterThreshold)) {
    return 'middle'
  } else {
    return textX < circleCx ? 'end' : 'start';
  };
};

---
<div id="container" class="w-full h-auto max-h-[400px] flex my-10 p-10">
  <!-- Set SVG dimensions and aspect ratio for responsiveness -->
  <svg viewBox="0 0 150 50" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" class="overflow-visible">
    <!-- Draw lines between circles -->
    {circles.slice(1).map((circle, index) => (
      <line 
        x1={circles[index].cx} 
        y1={circles[index].cy} 
        x2={circle.cx} 
        y2={circle.cy} 
        stroke-width="4"
        class="stroke-base-content"
      />
    ))}
  
    <!-- Draw circles and anchor links -->
    {circles.map(circle => {
      const { startX, startY, endX, endY, textX, textY } = calculatePositions(circle.cx, circle.cy, circle.r, circle.angle);
      const textAnchor = calculateTextAnchor(textX, circle.cx, circle.angle);
      const textAlignmentBaseLine = textY < circle.cy ? 'baseline' : 'hanging';
      return (<a 
        href={circle.href}
        style={`transform-origin: ${circle.cx}px ${circle.cy}px;`}
        class={"transition-transform duration-300 ease-in-out transform hover:scale-125 cursor-pointer " + getColorDropClass(color)}>
        <circle 
          cx={circle.cx} 
          cy={circle.cy} 
          r={circle.r} 
          class={"fill-" + getColorStr(color) + " stroke-base-content stroke-1"}
        />
        <!-- Add a curved line (arc) connecting the circle to the text -->
        <path 
          d={`M ${startX} ${startY} A ${circle.r + 1} ${circle.r + 1} 0 0 1 ${endX} ${endY}`}
          stroke-width="0.2" 
          fill="none"
          class="stroke-base-content"
        />
        <!-- Add text element relative to each circle -->
        <text 
          x={textX} 
          y={textY} 
          text-anchor={textAnchor}
          alignment-baseline={textAlignmentBaseLine}
          class="fill-base-content cursor-pointer"
          font-size="3"
        >
          {circle.text}
        </text>
      </a>)
    })}
  </svg>
</div>

<style>

  #container {
  }

  svg {
    width: 100%;
    max-width: 100%;
    /* border: 1px solid black; */
  }

  .drop-primary:hover {
    filter: drop-shadow(0 2px 2px oklch(var(--p) / 0.4))
          drop-shadow(0 4px 3px oklch(var(--p) / 0.1));
  }

  .drop-accent:hover {
    filter: drop-shadow(0 2px 2px oklch(var(--a) / 0.4))
          drop-shadow(0 4px 3px oklch(var(--a) / 0.1));
  }
</style>